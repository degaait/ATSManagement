// <auto-generated />
using System;
using ATSManagement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ATSManagement.Migrations
{
    [DbContext(typeof(AtsdbContext))]
    partial class AtsdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ATSManagement.Models.CivilJusticeNewRequestViewModel", b =>
                {
                    b.Property<string>("AssingmentRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeputyRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("OtherServiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PriorityNameWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityNameWithColorAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<string>("ServiceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTypeNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CivilJusticeNewRequestViewModel", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.LegalStudiesNewRequestViewModel", b =>
                {
                    b.Property<string>("AssingmentRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeputyRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DocId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DocID");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("OtherServiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PriorityNameWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityNameWithColorAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<string>("ServiceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTypeNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("LegalStudiesNewRequestViewModel", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.NewRequestViewModel", b =>
                {
                    b.Property<string>("AssingmentRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("OtherServiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PriorityNameWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityNameWithColorAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTypeNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("NewRequestViewModel", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.RequestViewModel", b =>
                {
                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("OtherServiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PriorityNameWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityNameWithColorAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTypeNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RequestViewModel", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblActivity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ActivityID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ActivityDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<string>("TimeTakenTocomplete")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_Activities", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblAdjornment", b =>
                {
                    b.Property<Guid>("AdjoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("AdjorneyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AppointmentReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DefendantInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Defendant_info");

                    b.Property<string>("ExpertHanlingCase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaintiffDefendant")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Plaintiff_Defendant");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<string>("TheCourtCaseHanled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatIsDone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdjoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_Adjornments", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblAdjournmentChat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<Guid?>("AdjoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDephead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExpert")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SendBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SendTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("ChatId");

                    b.HasIndex("AdjoryId");

                    b.HasIndex("SendBy");

                    b.HasIndex("SendTo");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_AdjournmentChats", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblAdractivitiesReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AsserinaSerategna")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Childrens")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hivpositives")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("HIVPositives");

                    b.Property<string>("LelochGudayAyine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mens")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("MonthId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MonthID");

                    b.Property<string>("OtherServantType")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("OutofResponsibilty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Property")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TypeID");

                    b.Property<string>("WomeElders")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Womens")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("YearId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("YearID");

                    b.Property<string>("YediridirGenzebMeten")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YeteWosenewuGenzebMeten")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MonthId");

                    b.HasIndex("TypeId");

                    b.HasIndex("YearId");

                    b.ToTable("tbl_ADRActivitiesReport", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblAdreventType", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TypeID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("TypeNames")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TypeId");

                    b.ToTable("tbl_ADREventTypes", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblAppointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AppointmentID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("AllowedAppointDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AppointmentDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DescusionFinalComeup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InistID");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentId");

                    b.HasIndex("InistId");

                    b.HasIndex("RequestedBy");

                    b.ToTable("tbl_Appointments", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblAppointmentChat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AppointmentID");

                    b.Property<string>("ChatContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ExterUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExterUserID");

                    b.Property<bool?>("IsEnternal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("ChatId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ExterUserId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_AppointmentChats", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblAppointmentParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AppointmentID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_AppointmentParticipants", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblAssignedYearlyPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentReview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("EngagementLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvaluationCheckLists")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvaluationCheckListsAttachmet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExitConfrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsUpprovedbyDepartment")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUpprovedbyTeam")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUprovedByDeputy")
                        .HasColumnType("bit");

                    b.Property<string>("MeetingLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProgressStatus")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpecificPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusID");

                    b.Property<string>("Torattachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TORAttachment");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("PlanId");

                    b.HasIndex("SpecificPlanId");

                    b.HasIndex("StatusId");

                    b.ToTable("tbl_AssignedYearlyPlans", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblAssignee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Assignees", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblAssignementType", b =>
                {
                    b.Property<Guid>("AssigneeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AssigneeTypeID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AssigneeType")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AssigneeTypeAmharic")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("AssigneeTypeId")
                        .HasName("PK_tlb_AssignementTypes");

                    b.ToTable("tbl_AssignementTypes", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblCivilJustice", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssingmentRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CaseTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CaseTypeID");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeputyUprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ExternalRequestStatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExternalRequestStatusID");

                    b.Property<string>("FinalReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TopStatus")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepId");

                    b.HasIndex("DepartmentUpprovalStatus");

                    b.HasIndex("DeputyUprovalStatus");

                    b.HasIndex("ExternalRequestStatusId");

                    b.HasIndex("InistId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("TeamUpprovalStatus");

                    b.HasIndex("UserUpprovalStatus");

                    b.ToTable("tbl_CivilJustice", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblCivilJusticeCaseType", b =>
                {
                    b.Property<Guid>("CaseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CaseTypeID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CaseTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CaseTypeId");

                    b.ToTable("tbl_CivilJusticeCaseType", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblCivilJusticeChat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ChatContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ForExpert")
                        .HasColumnType("bit");

                    b.Property<bool?>("ForStateMinister")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDephead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExpert")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<Guid?>("SendBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SendTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("ChatId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SendBy");

                    b.HasIndex("SendTo");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_CivilJusticeChats", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblCivilJusticeRequestActivity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ActivityID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ActivityDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.HasKey("ActivityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_CivilJusticeRequestActivity", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblCivilJusticeRequestReply", b =>
                {
                    b.Property<Guid>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ExternalReplayedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InternalReplayedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReplayDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReplyId");

                    b.HasIndex("ExternalReplayedBy");

                    b.HasIndex("InternalReplayedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_CivilJusticeRequestReplys", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblCompanyEmail", b =>
                {
                    b.Property<Guid>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmailID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("EmailAdress")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("EmailId");

                    b.ToTable("tbl_CompanyEmails", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblContactInformation", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("ContactCountry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactDetaiMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileUplaod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("ContactId");

                    b.ToTable("tbl_ContactInformations", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CountryId");

                    b.ToTable("tbl_Country", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblCourtAppointment", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<string>("AppointmentId")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("AppointmentID")
                        .IsFixedLength();

                    b.Property<string>("ChatContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDephead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExpert")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<Guid?>("SendBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SendTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("ChatId");

                    b.ToTable("tbl_CourtAppointment", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblDebatePerformance", b =>
                {
                    b.Property<Guid>("PerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PerformanceID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("PerformanceNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreformanceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerformanceId");

                    b.ToTable("tbl_DebatePerformances", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblDebatePerformanceEventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("SubPerformanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkPerformanceEventType")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("WorkPerformanceEventTypeEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubPerformanceId");

                    b.ToTable("tbl_DebatePerformanceEventTypes", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblDebateWorkPerformanceReport", b =>
                {
                    b.Property<Guid>("WorkPerformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkPerformID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Childrens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hivpositives")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HIVPositives");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("JudgementMoneyAmmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JudgementVerifiedAmmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MonthId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MonthID");

                    b.Property<string>("OtherCaseTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherServants")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutofContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Property")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubPerformanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TotalServant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WomenElders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Womens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkDebate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("YearId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("YearID");

                    b.HasKey("WorkPerformId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Id");

                    b.HasIndex("MonthId");

                    b.HasIndex("SubPerformanceId");

                    b.HasIndex("YearId");

                    b.ToTable("tbl_DebateWorkPerformanceReports", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblDecisionStatus", b =>
                {
                    b.Property<Guid>("DesStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("StatusName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StatusNameAmharic")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("StatusWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWithColorAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DesStatusId");

                    b.ToTable("tbl_DecisionStatus", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblDepartment", b =>
                {
                    b.Property<Guid>("DepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DepCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("DepNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepId");

                    b.ToTable("tbl_Department", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblDesicionRemark", b =>
                {
                    b.Property<int>("DesicionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesicionId"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DesicionRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.HasKey("DesicionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_DesicionRemark", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblDocumentHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HistoryID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExactFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExternalRepliedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InternalReplyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InternalReplyID");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<int?>("Round")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("ExternalRepliedBy");

                    b.HasIndex("InternalReplyId");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_DocumentHistories", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblDraftContractExaminationReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CaseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullMoneyAmmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Investigation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MonthId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MonthID");

                    b.Property<string>("QuestionSubmitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubmittedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("YearId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("YearID");

                    b.HasKey("Id");

                    b.HasIndex("MonthId");

                    b.HasIndex("SubmittedBy");

                    b.HasIndex("YearId");

                    b.ToTable("tbl_DraftContractExaminationReport", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<Guid?>("SubPerformanceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId");

                    b.HasIndex("SubPerformanceId");

                    b.ToTable("tbl_Events", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblExternalMainMenu", b =>
                {
                    b.Property<Guid>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ClassSvg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Class_svg");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("MenuDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MenuName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MenuNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuId");

                    b.ToTable("tbl_ExternalMainMenus", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblExternalRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("DepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DepID");

                    b.Property<Guid?>("ExterUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExterUserID");

                    b.Property<Guid?>("ExternalRequestStatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExternalRequestStatusID");

                    b.Property<Guid?>("IntId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IntID");

                    b.Property<string>("RequestDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestedDate")
                        .HasColumnType("datetime");

                    b.HasKey("RequestId");

                    b.HasIndex("DepId");

                    b.HasIndex("ExterUserId");

                    b.HasIndex("ExternalRequestStatusId");

                    b.HasIndex("IntId");

                    b.ToTable("tbl_ExternalRequests", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblExternalRequestStatus", b =>
                {
                    b.Property<Guid>("ExternalRequestStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExternalRequestStatusID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StatusNameAmharic")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StatusWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWithColorAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExternalRequestStatusId");

                    b.ToTable("tbl_ExternalRequestStatus", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblExternalSubmenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuID");

                    b.Property<string>("Submenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmenuAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepId");

                    b.HasIndex("MenuId");

                    b.ToTable("tbl_ExternalSubmenu", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblExternalUser", b =>
                {
                    b.Property<Guid>("ExterUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExterUserID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("AcceptedTerms")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<Guid?>("InistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Password")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ExterUserId");

                    b.HasIndex("InistId");

                    b.ToTable("tbl_ExternalUser", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblFollowup", b =>
                {
                    b.Property<int>("FollowUpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FollowUpId"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ExternalUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("FromExternal")
                        .HasColumnType("bit")
                        .HasColumnName("fromExternal");

                    b.Property<bool?>("FromInternal")
                        .HasColumnType("bit")
                        .HasColumnName("fromInternal");

                    b.Property<Guid?>("InistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InistID");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FollowUpId");

                    b.HasIndex("ExternalUserId");

                    b.HasIndex("InistId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Followups", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInistitution", b =>
                {
                    b.Property<Guid>("InistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NameAmharic")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("InistId");

                    b.ToTable("tbl_Inistitutions", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInpectionActivite", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("ActivityDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpecificPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeTakenTocomplete")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SpecificPlanId");

                    b.ToTable("tbl_InpectionActivites", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionChat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ChatContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ForExpert")
                        .HasColumnType("bit");

                    b.Property<bool?>("ForStateMinister")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDephead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExpert")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SendBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SendTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpecificPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatId");

                    b.HasIndex("SendBy");

                    b.HasIndex("SendTo");

                    b.HasIndex("SpecificPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_InspectionChat", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionInstitution", b =>
                {
                    b.Property<Guid>("SubMissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("ExpectedResponseDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReComendationFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecomendationDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecomendationFeedBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestStatus")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime?>("RequestedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ResponseStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReturnedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubmittedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubMissionId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("ResponseStatusId");

                    b.HasIndex("ReturnedBy");

                    b.HasIndex("SubmittedBy");

                    b.ToTable("tbl_Inspection_Institutions", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionLaw", b =>
                {
                    b.Property<Guid>("LawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("LawDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceArticle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LawId");

                    b.ToTable("tbl_InspectionLaws", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionPlan", b =>
                {
                    b.Property<Guid>("InspectionPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AssigneeTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AssigneeTypeID");

                    b.Property<string>("AssigningRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExactFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FinalStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAssignedTeam")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAssignedToUser")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSenttoInst")
                        .HasColumnType("bit");

                    b.Property<Guid?>("IsUpprovedbyDepartment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IsUpprovedbyTeam")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IsUprovedByDeputy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IsUserUproved")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OfficialLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("returnDate");

                    b.Property<string>("ReturningRemark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("returningRemark");

                    b.Property<string>("SendingRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("sentDate");

                    b.Property<string>("SentReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<Guid?>("YearId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("YearID");

                    b.HasKey("InspectionPlanId");

                    b.HasIndex("AssigneeTypeId");

                    b.HasIndex("IsUpprovedbyDepartment");

                    b.HasIndex("IsUpprovedbyTeam");

                    b.HasIndex("IsUprovedByDeputy");

                    b.HasIndex("IsUserUproved");

                    b.HasIndex("ProId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.HasIndex("YearId");

                    b.ToTable("tbl_InspectionPlans", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionReplye", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyId"));

                    b.Property<string>("Attachement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ExternalUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InternalUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<int?>("RecId")
                        .HasColumnType("int");

                    b.Property<string>("RecoDetail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReplyId");

                    b.HasIndex("ExternalUser");

                    b.HasIndex("InternalUser");

                    b.HasIndex("RecId");

                    b.ToTable("tbl_InspectionReplyes", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionReport", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatinDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("InistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LawId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RecostatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReportPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InistId");

                    b.HasIndex("LawId");

                    b.HasIndex("RecostatusId");

                    b.HasIndex("YearId");

                    b.ToTable("tbl_InspectionReports", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionReportFile", b =>
                {
                    b.Property<int>("RepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepId"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ForDepartment")
                        .HasColumnType("bit")
                        .HasColumnName("forDepartment");

                    b.Property<bool?>("ForDeputy")
                        .HasColumnType("bit");

                    b.Property<bool?>("ForExpert")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("ReportFiles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpecificPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RepId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Id");

                    b.HasIndex("SpecificPlanId");

                    b.ToTable("tbl_InspectionReportFiles", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionStatus", b =>
                {
                    b.Property<Guid>("ProId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("ProgressOrder")
                        .HasColumnType("int");

                    b.Property<string>("ProstatusTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProId");

                    b.ToTable("tbl_InspectionStatus", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInstotutionMonitoringReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AdrmoneyAmount")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADRMoneyAmount");

                    b.Property<string>("Adrnumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADRNumber");

                    b.Property<string>("ContractMoneyAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DebateMoneyAmmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DebateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Investigation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoniteredOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MonthId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MonthID");

                    b.Property<Guid?>("YearId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("YearID");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MonthId");

                    b.HasIndex("YearId");

                    b.ToTable("tbl_InstotutionMonitoringReports", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalDocumentHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HistoryID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExactFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<int?>("Round")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_InternalDocumentHistories", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AssingmentRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DepartmentDesicionRemark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("departmentDesicionRemark");

                    b.Property<Guid?>("DepartmentUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FinalReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalReportSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAssignedToexpert")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestStatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestStatusID");

                    b.Property<Guid?>("RequestedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("date")
                        .HasColumnName("sentDate");

                    b.Property<string>("SentReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ServiceTypeID");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamDesicionRemark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("teamDesicionRemark");

                    b.Property<Guid?>("TeamUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("tbl_InternalRequests", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalRequestAssignee", b =>
                {
                    b.Property<Guid>("AssigneeRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("AssigneeRequestId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_InternalRequestAssignees", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalRequestChat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ChatContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ForExpert")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDephead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExpert")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<Guid?>("SendBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SendTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatId");

                    b.HasIndex("SendBy");

                    b.HasIndex("SendTo");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_InternalRequestChats", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalRequestStatus", b =>
                {
                    b.Property<Guid>("RequestStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestStatusID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("ForDephead")
                        .HasColumnType("bit")
                        .HasColumnName("forDephead");

                    b.Property<bool?>("ForExpert")
                        .HasColumnType("bit")
                        .HasColumnName("forExpert");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StatusNameAmharic")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StatusWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWithColorAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestStatusId");

                    b.ToTable("tbl_InternalRequestStatus", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalServiceType", b =>
                {
                    b.Property<Guid>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ServiceTypeID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("ServiceOrderOrder")
                        .HasColumnType("int");

                    b.Property<string>("ServiceResultAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceResultEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTypeName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("ServiceTypeNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("tbl_InternalServiceTypes", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("DepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBranchOfficeUser")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefaultUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDepartmentHead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeputy")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInternalRequestUser")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSecretary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MidleName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamID");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("UserId");

                    b.HasIndex("DepId");

                    b.HasIndex("TeamId");

                    b.ToTable("tbl_InternalUsers", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblLanguage", b =>
                {
                    b.Property<int>("LangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LangID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LangId"));

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("tbl_Languages", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalAdviceReport", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Childrens")
                        .HasColumnType("int");

                    b.Property<int?>("ChildrensInvestigations")
                        .HasColumnType("int");

                    b.Property<int?>("Disablities")
                        .HasColumnType("int");

                    b.Property<int?>("DisablitiesInvestigation")
                        .HasColumnType("int");

                    b.Property<int?>("Elders")
                        .HasColumnType("int");

                    b.Property<int?>("EldersInvestigations")
                        .HasColumnType("int");

                    b.Property<int?>("GovernmentInstitutes")
                        .HasColumnType("int");

                    b.Property<int?>("GovernmentInstitutesInvestigations")
                        .HasColumnType("int");

                    b.Property<int?>("Hivpositive")
                        .HasColumnType("int")
                        .HasColumnName("HIVPositive");

                    b.Property<int?>("HivpositiveInvestigation")
                        .HasColumnType("int")
                        .HasColumnName("HIVPositiveInvestigation");

                    b.Property<string>("Investigation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Mens")
                        .HasColumnType("int");

                    b.Property<int?>("MensInvestigations")
                        .HasColumnType("int");

                    b.Property<Guid?>("Month")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Other")
                        .HasColumnType("int");

                    b.Property<int?>("OtherInvestigations")
                        .HasColumnType("int");

                    b.Property<int?>("PersecutionReturnies")
                        .HasColumnType("int");

                    b.Property<int?>("PersecutionReturniesInvestigations")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReportedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Total")
                        .HasColumnType("int");

                    b.Property<int?>("TotalInvestigations")
                        .HasColumnType("int")
                        .HasColumnName("totalInvestigations");

                    b.Property<int?>("Womens")
                        .HasColumnType("int");

                    b.Property<int?>("WomensInvestigations")
                        .HasColumnType("int");

                    b.Property<Guid?>("Year")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId");

                    b.HasIndex("Month");

                    b.HasIndex("ReportedBy");

                    b.HasIndex("Year");

                    b.ToTable("tbl_LegalAdviceReports", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalAdviceServantType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ServantTypeName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("tbl_LegalAdviceServantTypes", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalDraftingDocType", b =>
                {
                    b.Property<Guid>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DocID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DocDesciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("DocNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocmentOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocmentOrder"));

                    b.HasKey("DocId");

                    b.ToTable("tbl_LegalDraftingDocType", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalDraftingQuestionType", b =>
                {
                    b.Property<Guid>("QuestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("QuestTypeID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("QuestTypeDescription")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("QuestTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("QuestTypeId");

                    b.ToTable("tbl_LegalDraftingQuestionType", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalStudiesActivity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ActivityID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ActivityDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.HasKey("ActivityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_LegalStudiesActivity", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalStudiesChat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ChatContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ForExpert")
                        .HasColumnType("bit");

                    b.Property<bool?>("ForStateMinister")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDephead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExpert")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<Guid?>("SendBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SendTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("ChatId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SendBy");

                    b.HasIndex("SendTo");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_LegalStudiesChats", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalStudiesDrafting", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssingmentRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CaseTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CaseTypeID");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeputyUprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DocID");

                    b.Property<string>("DocumentFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ExternalRequestStatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExternalRequestStatusID");

                    b.Property<string>("FinalReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("QuestTypeID");

                    b.Property<string>("RequestDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TopStatus")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("UserUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepId");

                    b.HasIndex("DepartmentUpprovalStatus");

                    b.HasIndex("DeputyUprovalStatus");

                    b.HasIndex("DocId");

                    b.HasIndex("ExternalRequestStatusId");

                    b.HasIndex("InistId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("QuestTypeId");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("TeamUpprovalStatus");

                    b.HasIndex("UserUpprovalStatus");

                    b.ToTable("tbl_LegalStudiesDrafting", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalStudiesReplay", b =>
                {
                    b.Property<Guid>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ExternalReplayedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InternalReplayedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReplayDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReplyId");

                    b.HasIndex("ExternalReplayedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_LegalStudiesReplays", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblMainMenu", b =>
                {
                    b.Property<Guid>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ClassSvg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Class_svg");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("MenuDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MenuName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MenuNameAmharic")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("MenuId");

                    b.ToTable("tbl_MainMenu", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblMonth", b =>
                {
                    b.Property<Guid>("MonthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MonthID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("MonthName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MonthId");

                    b.ToTable("tbl_Months", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExterUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExterUserID");

                    b.Property<bool?>("FromExternal")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificationDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExterUserId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Notifications", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblPlanCatagory", b =>
                {
                    b.Property<int>("PlanCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanCatId"));

                    b.Property<string>("CatDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("DoesHaveSpecificPlan")
                        .HasColumnType("bit");

                    b.Property<Guid?>("InspectionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlanCatId");

                    b.HasIndex("InspectionPlanId");

                    b.ToTable("tbl_PlanCatagory", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblPlanInistitution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("InistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpecificPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InistId");

                    b.HasIndex("SpecificPlanId");

                    b.ToTable("tbl_Plan_Inistitution", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblPriority", b =>
                {
                    b.Property<Guid>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("PriorityName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PriorityNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityNameWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityNameWithColorAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityId");

                    b.ToTable("tbl_Priority", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblPriorityQuestion", b =>
                {
                    b.Property<Guid>("PriorityQueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("QuestDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionsNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityQueId");

                    b.ToTable("tbl_PriorityQuestions", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblRecomendation", b =>
                {
                    b.Property<Guid>("RecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatinDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("InistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LawId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Recomendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecomendationTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RecostatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RecostatusID");

                    b.Property<string>("ReportPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("YearId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("YearID");

                    b.HasKey("RecoId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InistId");

                    b.HasIndex("LawId");

                    b.HasIndex("RecostatusId");

                    b.HasIndex("YearId");

                    b.ToTable("tbl_Recomendation", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblRecomendationStatus", b =>
                {
                    b.Property<Guid>("RecostatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RecostatusID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Status")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StatusAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusColourAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecostatusId");

                    b.ToTable("tbl_RecomendationStatus", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblReplay", b =>
                {
                    b.Property<Guid>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReplyID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExternalReplayedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InternalReplayedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("ReplayDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReplyId");

                    b.HasIndex("ExternalReplayedBy");

                    b.HasIndex("InternalReplayedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_Replays", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblReplyResponseWithExpert", b =>
                {
                    b.Property<int>("RepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepId"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("ReportFiles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpecificPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RepId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Id");

                    b.HasIndex("SpecificPlanId");

                    b.ToTable("tbl_ReplyResponseWithExpert", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblReplyResponseWithStateMinster", b =>
                {
                    b.Property<int>("RepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepId"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("ReportFiles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpecificPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RepId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Id");

                    b.HasIndex("SpecificPlanId");

                    b.ToTable("tbl_ReplyResponseWithStateMinster", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblReponseStatus", b =>
                {
                    b.Property<Guid>("ResponseStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWithColourAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponseStatusId");

                    b.ToTable("tbl_ReponseStatus", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblReportServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportSeriviceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbl_ReportServiceTypes", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ActingAs")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AdrResult")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("AdrStatus")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Adrtype")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ADRType");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssingmentRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bench")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("CaseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CaseTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CaseTypeID");

                    b.Property<string>("Claimant")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ContractNeResult")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ContractNeServiceType")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ContractNeStatus")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Country")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("CourtCenter")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfAdjournment")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateofJudgement")
                        .HasColumnType("date");

                    b.Property<string>("Defendent")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DepartmentDesicionRemark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("departmentDesicionRemark");

                    b.Property<Guid?>("DepartmentUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeputyDesicionRemark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deputyDesicionRemark");

                    b.Property<string>("DeputyRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeputyUprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("ExternalRequestStatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExternalRequestStatusID");

                    b.Property<string>("FinalReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalReportSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("InistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternationalCaseResult")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("InternationalCaseStatus")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool?>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAssignedTodepartment")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSenttoInst")
                        .HasColumnType("bit");

                    b.Property<string>("Jursidiction")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("LegalAdviceResult")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("LegalAdviceStatus")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("LetterofUpproval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListigationResult")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ListigationStatus")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("LitigationType")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int?>("MoneyAmount")
                        .HasColumnType("int");

                    b.Property<string>("MoneyCurrency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("OtherDocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherServiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Plaintiful")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("QuestTypeID");

                    b.Property<string>("Reasult")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestRound")
                        .HasColumnType("int");

                    b.Property<Guid?>("RequestedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Respondent")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ResultDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturningRemark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("returningRemark");

                    b.Property<string>("SendingRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("date")
                        .HasColumnName("sentDate");

                    b.Property<string>("SentReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ServiceTypeID");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamDesicionRemark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("teamDesicionRemark");

                    b.Property<Guid?>("TeamUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TopStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TopStatusID");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserUpprovalStatus")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentUpprovalStatus");

                    b.HasIndex("DeputyUprovalStatus");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("ExternalRequestStatusId");

                    b.HasIndex("InistId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("QuestTypeId");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("TeamUpprovalStatus");

                    b.HasIndex("TopStatusId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserUpprovalStatus");

                    b.ToTable("tbl_Requests", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequestAssignee", b =>
                {
                    b.Property<Guid>("AssigneeRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("AssigneeRequestId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_RequestAssignees", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequestAssignementType", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("tbl_RequestAssignementTypes", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequestDepartmentRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AssigneeTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AssigneeTypeID");

                    b.Property<Guid?>("DepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DepID");

                    b.Property<bool?>("IsAssingedToUser")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamID");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeTypeId");

                    b.HasIndex("DepId");

                    b.HasIndex("RequestId");

                    b.HasIndex("TeamId");

                    b.ToTable("TBL_RequestDepartmentRelations", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequestPriorityQuestionsRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("PriorityQueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.HasKey("Id");

                    b.HasIndex("PriorityQueId");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_RequestPriorityQuestionsRelations", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequestType", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TypeID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("TypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("tbl_RequestTypes", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("tbl_Roles", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblRound", b =>
                {
                    b.Property<int>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoundID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoundId"));

                    b.Property<Guid?>("RequestIid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestIID");

                    b.Property<int?>("RoundNumber")
                        .HasColumnType("int");

                    b.HasKey("RoundId");

                    b.HasIndex("RequestIid");

                    b.ToTable("tbl_Rounds", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblSentInspection", b =>
                {
                    b.Property<int>("RecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecId"));

                    b.Property<DateTime?>("ExpectedReplyDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("InspectionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InstId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InstID");

                    b.Property<bool?>("IsChatCloset")
                        .HasColumnType("bit");

                    b.Property<string>("OfficialLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RepliedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RespondedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ResponseDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendingRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SentBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SentReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpecificPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecId");

                    b.HasIndex("InspectionPlanId");

                    b.HasIndex("InstId");

                    b.HasIndex("RepliedBy");

                    b.HasIndex("SentBy");

                    b.HasIndex("SpecificPlanId");

                    b.ToTable("tbl_SentInspections", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblServiceType", b =>
                {
                    b.Property<Guid>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ServiceTypeID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("DepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DepID");

                    b.Property<int>("ServiceOrderOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceOrderOrder"));

                    b.Property<string>("ServiceResultAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceResultEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTypeName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("ServiceTypeNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.HasIndex("DepId");

                    b.ToTable("tbl_ServiceTypes", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblSpecificPlan", b =>
                {
                    b.Property<Guid>("SpecificPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AssigneeTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AssigneeTypeID");

                    b.Property<string>("AssigningRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FinalStatus")
                        .HasColumnType("bit");

                    b.Property<Guid?>("InistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InspectionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAssignedToTeam")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAssignedToUser")
                        .HasColumnType("bit");

                    b.Property<Guid?>("IsUpprovedbyDepartment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IsUpprovedbyTeam")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IsUprovedByDeputy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IsUserUproved")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PlanCatId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamID");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecificPlanId");

                    b.HasIndex("AssigneeTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InistId");

                    b.HasIndex("InspectionPlanId");

                    b.HasIndex("IsUpprovedbyDepartment");

                    b.HasIndex("IsUpprovedbyTeam");

                    b.HasIndex("IsUprovedByDeputy");

                    b.HasIndex("IsUserUproved");

                    b.HasIndex("PlanCatId");

                    b.HasIndex("ProId");

                    b.HasIndex("TeamId");

                    b.ToTable("tbl_SpecificPlans", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblStatus", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("StatusAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWithColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusWithColorAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId")
                        .HasName("PK_tbl_Status_1");

                    b.ToTable("tbl_Status", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblSubDebatePerformance", b =>
                {
                    b.Property<Guid>("SubPerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("PerformanceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PerformanceID");

                    b.Property<string>("SubPerformanceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubPerformanceId");

                    b.HasIndex("PerformanceId");

                    b.ToTable("tbl_SubDebatePerformances", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblSubmenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ForBranchOfficer")
                        .HasColumnType("bit")
                        .HasColumnName("forBranchOfficer");

                    b.Property<bool?>("ForDefaulUser")
                        .HasColumnType("bit")
                        .HasColumnName("forDefaulUser");

                    b.Property<bool?>("ForDepHead")
                        .HasColumnType("bit")
                        .HasColumnName("forDepHead");

                    b.Property<bool?>("ForDeputy")
                        .HasColumnType("bit")
                        .HasColumnName("forDeputy");

                    b.Property<bool?>("ForInternalUser")
                        .HasColumnType("bit")
                        .HasColumnName("forInternalUser");

                    b.Property<bool?>("ForSecretary")
                        .HasColumnType("bit")
                        .HasColumnName("forSecretary");

                    b.Property<bool?>("ForSuperAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("forSuperAdmin");

                    b.Property<bool?>("ForTeamLeader")
                        .HasColumnType("bit")
                        .HasColumnName("forTeamLeader");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MenuID");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleID");

                    b.Property<string>("Submenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmenuAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("tbl_Submenu", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblTeam", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamID");

                    b.Property<Guid?>("DepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DepID");

                    b.Property<string>("TeamDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamLeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeamLeaderID");

                    b.Property<string>("TeamName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TeamNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.HasIndex("DepId");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("tbl_Teams", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblTermsAndCondition", b =>
                {
                    b.Property<Guid>("TermsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TermsID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("TermsId");

                    b.ToTable("tbl_TermsAndConditions", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblTopStatus", b =>
                {
                    b.Property<int>("TopStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TopStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopStatusId"));

                    b.Property<string>("StatusHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("StatusNameAmharic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopStatusId");

                    b.ToTable("tbl_TopStatus", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblWitnessEvidence", b =>
                {
                    b.Property<Guid>("WitnessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WitnessID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EvidenceFiles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvidenceVideos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestID");

                    b.Property<string>("WitnessesName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WitnessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("tbl_Witness_Evidences", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblYear", b =>
                {
                    b.Property<Guid>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("YearID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Year")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("YearId");

                    b.ToTable("tbl_Years", (string)null);
                });

            modelBuilder.Entity("ATSManagement.Models.TblActivity", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblActivities")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_Activities_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblActivities")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Activities_tbl_Requests");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAdjornment", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblAdjornments")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_Adjornments_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblAdjornments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Adjornments_tbl_Requests");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAdjournmentChat", b =>
                {
                    b.HasOne("ATSManagement.Models.TblAdjornment", "Adjory")
                        .WithMany("TblAdjournmentChats")
                        .HasForeignKey("AdjoryId")
                        .HasConstraintName("FK_tbl_AdjournmentChats_tbl_Adjornments");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "SendByNavigation")
                        .WithMany("TblAdjournmentChatSendByNavigations")
                        .HasForeignKey("SendBy")
                        .HasConstraintName("FK_tbl_AdjournmentChats_tbl_InternalUsers1");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "SendToNavigation")
                        .WithMany("TblAdjournmentChatSendToNavigations")
                        .HasForeignKey("SendTo")
                        .HasConstraintName("FK_tbl_AdjournmentChats_tbl_InternalUsers2");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblAdjournmentChatUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_AdjournmentChats_tbl_InternalUsers");

                    b.Navigation("Adjory");

                    b.Navigation("SendByNavigation");

                    b.Navigation("SendToNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAdractivitiesReport", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblAdractivitiesReports")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_ADRActivitiesReport_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblMonth", "Month")
                        .WithMany("TblAdractivitiesReports")
                        .HasForeignKey("MonthId")
                        .HasConstraintName("FK_tbl_ADRActivitiesReport_tbl_Months");

                    b.HasOne("ATSManagement.Models.TblAdreventType", "Type")
                        .WithMany("TblAdractivitiesReports")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_tbl_ADRActivitiesReport_tbl_ADREventTypes");

                    b.HasOne("ATSManagement.Models.TblYear", "Year")
                        .WithMany("TblAdractivitiesReports")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_tbl_ADRActivitiesReport_tbl_Years");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Month");

                    b.Navigation("Type");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAppointment", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInistitution", "Inist")
                        .WithMany("TblAppointments")
                        .HasForeignKey("InistId")
                        .HasConstraintName("FK_tbl_Appointments_tbl_Inistitutions");

                    b.HasOne("ATSManagement.Models.TblExternalUser", "RequestedByNavigation")
                        .WithMany("TblAppointments")
                        .HasForeignKey("RequestedBy")
                        .HasConstraintName("FK_tbl_Appointments_tbl_ExternalUser");

                    b.Navigation("Inist");

                    b.Navigation("RequestedByNavigation");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAppointmentChat", b =>
                {
                    b.HasOne("ATSManagement.Models.TblAppointment", "Appointment")
                        .WithMany("TblAppointmentChats")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_tbl_AppointmentChats_tbl_Appointments");

                    b.HasOne("ATSManagement.Models.TblExternalUser", "ExterUser")
                        .WithMany("TblAppointmentChats")
                        .HasForeignKey("ExterUserId")
                        .HasConstraintName("FK_tbl_AppointmentChats_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblAppointmentChats")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_AppointmentChats_tbl_InternalUsers");

                    b.Navigation("Appointment");

                    b.Navigation("ExterUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAppointmentParticipant", b =>
                {
                    b.HasOne("ATSManagement.Models.TblAppointment", "Appointment")
                        .WithMany("TblAppointmentParticipants")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_tbl_AppointmentParticipants_tbl_AppointmentParticipants");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblAppointmentParticipants")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_AppointmentParticipants_tbl_InternalUsers");

                    b.Navigation("Appointment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAssignedYearlyPlan", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "AssignedByNavigation")
                        .WithMany("TblAssignedYearlyPlanAssignedByNavigations")
                        .HasForeignKey("AssignedBy")
                        .HasConstraintName("FK_tbl_AssignedYearlyPlans_tbl_AssignedBy");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "AssignedToNavigation")
                        .WithMany("TblAssignedYearlyPlanAssignedToNavigations")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("FK_tbl_AssignedYearlyPlans_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblInspectionPlan", "Plan")
                        .WithMany("TblAssignedYearlyPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_AssignedYearlyPlans_tbl_InspectionPlans");

                    b.HasOne("ATSManagement.Models.TblSpecificPlan", "SpecificPlan")
                        .WithMany("TblAssignedYearlyPlans")
                        .HasForeignKey("SpecificPlanId")
                        .HasConstraintName("FK_tbl_AssignedYearlyPlans_tbl_SpecificPlans");

                    b.HasOne("ATSManagement.Models.TblStatus", "Status")
                        .WithMany("TblAssignedYearlyPlans")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_tbl_AssignedYearlyPlans_tbl_Status");

                    b.Navigation("AssignedByNavigation");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("Plan");

                    b.Navigation("SpecificPlan");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAssignee", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblAssignees")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_Assignees_tbl_InternalUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblCivilJustice", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "AssignedByNavigation")
                        .WithMany("TblCivilJusticeAssignedByNavigations")
                        .HasForeignKey("AssignedBy")
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_InternalUsers1");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "AssignedToNavigation")
                        .WithMany("TblCivilJusticeAssignedToNavigations")
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblCivilJusticeCaseType", "CaseType")
                        .WithMany("TblCivilJustices")
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_CivilJusticeCaseType");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblCivilJusticeCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_InternalUsers2");

                    b.HasOne("ATSManagement.Models.TblDepartment", "Dep")
                        .WithMany("TblCivilJustices")
                        .HasForeignKey("DepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_Department");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "DepartmentUpprovalStatusNavigation")
                        .WithMany("TblCivilJusticeDepartmentUpprovalStatusNavigations")
                        .HasForeignKey("DepartmentUpprovalStatus")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_DecisionStatus");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "DeputyUprovalStatusNavigation")
                        .WithMany("TblCivilJusticeDeputyUprovalStatusNavigations")
                        .HasForeignKey("DeputyUprovalStatus")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_DecisionStatus2");

                    b.HasOne("ATSManagement.Models.TblExternalRequestStatus", "ExternalRequestStatus")
                        .WithMany("TblCivilJustices")
                        .HasForeignKey("ExternalRequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_ExternalRequestStatus");

                    b.HasOne("ATSManagement.Models.TblInistitution", "Inist")
                        .WithMany("TblCivilJustices")
                        .HasForeignKey("InistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_Inistitutions");

                    b.HasOne("ATSManagement.Models.TblPriority", "Priority")
                        .WithMany("TblCivilJustices")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_Priority");

                    b.HasOne("ATSManagement.Models.TblExternalUser", "RequestedByNavigation")
                        .WithMany("TblCivilJustices")
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "TeamUpprovalStatusNavigation")
                        .WithMany("TblCivilJusticeTeamUpprovalStatusNavigations")
                        .HasForeignKey("TeamUpprovalStatus")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_DecisionStatus1");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "UserUpprovalStatusNavigation")
                        .WithMany("TblCivilJusticeUserUpprovalStatusNavigations")
                        .HasForeignKey("UserUpprovalStatus")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_CivilJustice_tbl_DecisionStatus3");

                    b.Navigation("AssignedByNavigation");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("CaseType");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Dep");

                    b.Navigation("DepartmentUpprovalStatusNavigation");

                    b.Navigation("DeputyUprovalStatusNavigation");

                    b.Navigation("ExternalRequestStatus");

                    b.Navigation("Inist");

                    b.Navigation("Priority");

                    b.Navigation("RequestedByNavigation");

                    b.Navigation("TeamUpprovalStatusNavigation");

                    b.Navigation("UserUpprovalStatusNavigation");
                });

            modelBuilder.Entity("ATSManagement.Models.TblCivilJusticeChat", b =>
                {
                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblCivilJusticeChats")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_tbl_CivilJusticeChats_tbl_Requests");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "SendByNavigation")
                        .WithMany("TblCivilJusticeChatSendByNavigations")
                        .HasForeignKey("SendBy")
                        .HasConstraintName("FK_tbl_CivilJusticeChats_tbl_InternalUsers1");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "SendToNavigation")
                        .WithMany("TblCivilJusticeChatSendToNavigations")
                        .HasForeignKey("SendTo")
                        .HasConstraintName("FK_tbl_CivilJusticeChats_tbl_InternalUsers2");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblCivilJusticeChatUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_CivilJusticeChats_tbl_InternalUsers");

                    b.Navigation("Request");

                    b.Navigation("SendByNavigation");

                    b.Navigation("SendToNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblCivilJusticeRequestActivity", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblCivilJusticeRequestActivities")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_CivilJusticeRequestActivity_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblCivilJustice", "Request")
                        .WithMany("TblCivilJusticeRequestActivities")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_CivilJusticeRequestActivity_tbl_CivilJustice");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblCivilJusticeRequestReply", b =>
                {
                    b.HasOne("ATSManagement.Models.TblExternalUser", "ExternalReplayedByNavigation")
                        .WithMany("TblCivilJusticeRequestReplies")
                        .HasForeignKey("ExternalReplayedBy")
                        .HasConstraintName("FK_tbl_CivilJusticeRequestReplys_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "InternalReplayedByNavigation")
                        .WithMany("TblCivilJusticeRequestReplies")
                        .HasForeignKey("InternalReplayedBy")
                        .HasConstraintName("FK_tbl_CivilJusticeRequestReplys_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblCivilJustice", "Request")
                        .WithMany("TblCivilJusticeRequestReplies")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_CivilJusticeRequestReplys_tbl_CivilJustice");

                    b.Navigation("ExternalReplayedByNavigation");

                    b.Navigation("InternalReplayedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblDebatePerformanceEventType", b =>
                {
                    b.HasOne("ATSManagement.Models.TblSubDebatePerformance", "SubPerformance")
                        .WithMany("TblDebatePerformanceEventTypes")
                        .HasForeignKey("SubPerformanceId")
                        .HasConstraintName("FK_tbl_DebatePerformanceEventTypes_tbl_SubDebatePerformances");

                    b.Navigation("SubPerformance");
                });

            modelBuilder.Entity("ATSManagement.Models.TblDebateWorkPerformanceReport", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblDebateWorkPerformanceReports")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_DebateWorkPerformanceReports_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblDebatePerformanceEventType", "IdNavigation")
                        .WithMany("TblDebateWorkPerformanceReports")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_tbl_DebateWorkPerformanceReports_tbl_DebateWorkPerformanceReports");

                    b.HasOne("ATSManagement.Models.TblMonth", "Month")
                        .WithMany("TblDebateWorkPerformanceReports")
                        .HasForeignKey("MonthId")
                        .HasConstraintName("FK_tbl_DebateWorkPerformanceReports_tbl_Months");

                    b.HasOne("ATSManagement.Models.TblSubDebatePerformance", "SubPerformance")
                        .WithMany("TblDebateWorkPerformanceReports")
                        .HasForeignKey("SubPerformanceId")
                        .HasConstraintName("FK_tbl_DebateWorkPerformanceReports_tbl_SubDebatePerformances");

                    b.HasOne("ATSManagement.Models.TblYear", "Year")
                        .WithMany("TblDebateWorkPerformanceReports")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_tbl_DebateWorkPerformanceReports_tbl_Years");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("IdNavigation");

                    b.Navigation("Month");

                    b.Navigation("SubPerformance");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("ATSManagement.Models.TblDesicionRemark", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblDesicionRemarks")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_DesicionRemark_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblDesicionRemarks")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_tbl_DesicionRemark_tbl_Requests");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblDocumentHistory", b =>
                {
                    b.HasOne("ATSManagement.Models.TblExternalUser", "ExternalRepliedByNavigation")
                        .WithMany("TblDocumentHistories")
                        .HasForeignKey("ExternalRepliedBy")
                        .HasConstraintName("FK_tbl_DocumentHistories_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "InternalReply")
                        .WithMany("TblDocumentHistories")
                        .HasForeignKey("InternalReplyId")
                        .HasConstraintName("FK_tbl_DocumentHistories_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblDocumentHistories")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_DocumentHistories_tbl_Requests");

                    b.Navigation("ExternalRepliedByNavigation");

                    b.Navigation("InternalReply");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblDraftContractExaminationReport", b =>
                {
                    b.HasOne("ATSManagement.Models.TblMonth", "Month")
                        .WithMany("TblDraftContractExaminationReports")
                        .HasForeignKey("MonthId")
                        .HasConstraintName("FK_tbl_DraftContractExaminationReport_tbl_Months");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "SubmittedByNavigation")
                        .WithMany("TblDraftContractExaminationReports")
                        .HasForeignKey("SubmittedBy")
                        .HasConstraintName("FK_tbl_DraftContractExaminationReport_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblYear", "Year")
                        .WithMany("TblDraftContractExaminationReports")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_tbl_DraftContractExaminationReport_tbl_Years");

                    b.Navigation("Month");

                    b.Navigation("SubmittedByNavigation");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("ATSManagement.Models.TblEvent", b =>
                {
                    b.HasOne("ATSManagement.Models.TblSubDebatePerformance", "SubPerformance")
                        .WithMany("TblEvents")
                        .HasForeignKey("SubPerformanceId")
                        .HasConstraintName("FK_tbl_Events_tbl_SubDebatePerformances");

                    b.Navigation("SubPerformance");
                });

            modelBuilder.Entity("ATSManagement.Models.TblExternalRequest", b =>
                {
                    b.HasOne("ATSManagement.Models.TblDepartment", "Dep")
                        .WithMany("TblExternalRequests")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_tbl_ExternalRequests_tbl_Department");

                    b.HasOne("ATSManagement.Models.TblExternalUser", "ExterUser")
                        .WithMany("TblExternalRequests")
                        .HasForeignKey("ExterUserId")
                        .HasConstraintName("FK_tbl_ExternalRequests_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblExternalRequestStatus", "ExternalRequestStatus")
                        .WithMany("TblExternalRequests")
                        .HasForeignKey("ExternalRequestStatusId")
                        .HasConstraintName("FK_tbl_ExternalRequests_tbl_ExternalRequestStatus");

                    b.HasOne("ATSManagement.Models.TblInistitution", "Int")
                        .WithMany("TblExternalRequests")
                        .HasForeignKey("IntId")
                        .HasConstraintName("FK_tbl_ExternalRequests_tbl_Inistitutions");

                    b.Navigation("Dep");

                    b.Navigation("ExterUser");

                    b.Navigation("ExternalRequestStatus");

                    b.Navigation("Int");
                });

            modelBuilder.Entity("ATSManagement.Models.TblExternalSubmenu", b =>
                {
                    b.HasOne("ATSManagement.Models.TblDepartment", "Dep")
                        .WithMany("TblExternalSubmenus")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_tbl_ExternalSubmenu_tbl_Department");

                    b.HasOne("ATSManagement.Models.TblExternalMainMenu", "Menu")
                        .WithMany("TblExternalSubmenus")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_tbl_ExternalSubmenu_tbl_ExternalMainMenus");

                    b.Navigation("Dep");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("ATSManagement.Models.TblExternalUser", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInistitution", "Inist")
                        .WithMany("TblExternalUsers")
                        .HasForeignKey("InistId")
                        .HasConstraintName("FK_tbl_ExternalUser_tbl_Inistitutions");

                    b.Navigation("Inist");
                });

            modelBuilder.Entity("ATSManagement.Models.TblFollowup", b =>
                {
                    b.HasOne("ATSManagement.Models.TblExternalUser", "ExternalUser")
                        .WithMany("TblFollowups")
                        .HasForeignKey("ExternalUserId")
                        .HasConstraintName("FK_tbl_Followups_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblInistitution", "Inist")
                        .WithMany("TblFollowups")
                        .HasForeignKey("InistId")
                        .HasConstraintName("FK_tbl_Followups_tbl_Inistitutions");

                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblFollowups")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_tbl_Followups_tbl_Requests");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblFollowups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_Followups_tbl_InternalUsers");

                    b.Navigation("ExternalUser");

                    b.Navigation("Inist");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInpectionActivite", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblInpectionActivites")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_InpectionActivites_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblSpecificPlan", "SpecificPlan")
                        .WithMany("TblInpectionActivites")
                        .HasForeignKey("SpecificPlanId")
                        .HasConstraintName("FK_tbl_InpectionActivites_tbl_SpecificPlans");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("SpecificPlan");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionChat", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "SendByNavigation")
                        .WithMany("TblInspectionChatSendByNavigations")
                        .HasForeignKey("SendBy")
                        .HasConstraintName("FK_tbl_InspectionChat_tbl_InternalUsers1");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "SendToNavigation")
                        .WithMany("TblInspectionChatSendToNavigations")
                        .HasForeignKey("SendTo")
                        .HasConstraintName("FK_tbl_InspectionChat_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblSpecificPlan", "SpecificPlan")
                        .WithMany("TblInspectionChats")
                        .HasForeignKey("SpecificPlanId")
                        .HasConstraintName("FK_tbl_InspectionChat_tbl_SpecificPlans");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblInspectionChatUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_InspectionChat_tbl_InternalUsers2");

                    b.Navigation("SendByNavigation");

                    b.Navigation("SendToNavigation");

                    b.Navigation("SpecificPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionInstitution", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInistitution", "Institution")
                        .WithMany("TblInspectionInstitutions")
                        .HasForeignKey("InstitutionId")
                        .HasConstraintName("FK_tbl_Inspection_Institutions_tbl_Inistitutions");

                    b.HasOne("ATSManagement.Models.TblReponseStatus", "ResponseStatus")
                        .WithMany("TblInspectionInstitutions")
                        .HasForeignKey("ResponseStatusId")
                        .HasConstraintName("FK_tbl_Inspection_Institutions_tbl_ReponseStatus");

                    b.HasOne("ATSManagement.Models.TblExternalUser", "ReturnedByNavigation")
                        .WithMany("TblInspectionInstitutions")
                        .HasForeignKey("ReturnedBy")
                        .HasConstraintName("FK_tbl_Inspection_Institutions_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "SubmittedByNavigation")
                        .WithMany("TblInspectionInstitutions")
                        .HasForeignKey("SubmittedBy")
                        .HasConstraintName("FK_tbl_Inspection_Institutions_tbl_InternalUsers");

                    b.Navigation("Institution");

                    b.Navigation("ResponseStatus");

                    b.Navigation("ReturnedByNavigation");

                    b.Navigation("SubmittedByNavigation");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionPlan", b =>
                {
                    b.HasOne("ATSManagement.Models.TblAssignementType", "AssigneeType")
                        .WithMany("TblInspectionPlans")
                        .HasForeignKey("AssigneeTypeId")
                        .HasConstraintName("FK_tbl_InspectionPlans_tbl_AssignementTypes");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "IsUpprovedbyDepartmentNavigation")
                        .WithMany("TblInspectionPlanIsUpprovedbyDepartmentNavigations")
                        .HasForeignKey("IsUpprovedbyDepartment")
                        .HasConstraintName("FK_tbl_InspectionPlans_tbl_DecisionStatus");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "IsUpprovedbyTeamNavigation")
                        .WithMany("TblInspectionPlanIsUpprovedbyTeamNavigations")
                        .HasForeignKey("IsUpprovedbyTeam")
                        .HasConstraintName("FK_tbl_InspectionPlans_tbl_DecisionStatus1");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "IsUprovedByDeputyNavigation")
                        .WithMany("TblInspectionPlanIsUprovedByDeputyNavigations")
                        .HasForeignKey("IsUprovedByDeputy")
                        .HasConstraintName("FK_tbl_InspectionPlans_tbl_DecisionStatus2");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "IsUserUprovedNavigation")
                        .WithMany("TblInspectionPlanIsUserUprovedNavigations")
                        .HasForeignKey("IsUserUproved")
                        .HasConstraintName("FK_tbl_InspectionPlans_tbl_DecisionStatus3");

                    b.HasOne("ATSManagement.Models.TblInspectionStatus", "Pro")
                        .WithMany("TblInspectionPlans")
                        .HasForeignKey("ProId")
                        .HasConstraintName("FK_tbl_Progress_tbl_InspectionPlans");

                    b.HasOne("ATSManagement.Models.TblTeam", "Team")
                        .WithMany("TblInspectionPlans")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_tbl_InspectionPlans_tbl_Teams");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblInspectionPlans")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_InspectionPlans_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblYear", "Year")
                        .WithMany("TblInspectionPlans")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_tbl_Years_tbl_InspectionPlans");

                    b.Navigation("AssigneeType");

                    b.Navigation("IsUpprovedbyDepartmentNavigation");

                    b.Navigation("IsUpprovedbyTeamNavigation");

                    b.Navigation("IsUprovedByDeputyNavigation");

                    b.Navigation("IsUserUprovedNavigation");

                    b.Navigation("Pro");

                    b.Navigation("Team");

                    b.Navigation("User");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionReplye", b =>
                {
                    b.HasOne("ATSManagement.Models.TblExternalUser", "ExternalUserNavigation")
                        .WithMany("TblInspectionReplyes")
                        .HasForeignKey("ExternalUser")
                        .HasConstraintName("FK_tbl_InspectionReplyes_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "InternalUserNavigation")
                        .WithMany("TblInspectionReplyes")
                        .HasForeignKey("InternalUser")
                        .HasConstraintName("FK_tbl_InspectionReplyes_tbl_InternalUsers1");

                    b.HasOne("ATSManagement.Models.TblSentInspection", "Rec")
                        .WithMany("TblInspectionReplyes")
                        .HasForeignKey("RecId")
                        .HasConstraintName("FK_tbl_InspectionReplyes_tbl_SentInspections");

                    b.Navigation("ExternalUserNavigation");

                    b.Navigation("InternalUserNavigation");

                    b.Navigation("Rec");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionReport", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblInspectionReports")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_InspectionReports_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblInistitution", "Inist")
                        .WithMany("TblInspectionReports")
                        .HasForeignKey("InistId")
                        .HasConstraintName("FK_tbl_InspectionReports_tbl_Inistitutions");

                    b.HasOne("ATSManagement.Models.TblInspectionLaw", "Law")
                        .WithMany("TblInspectionReports")
                        .HasForeignKey("LawId")
                        .HasConstraintName("FK_tbl_InspectionReports_tbl_InspectionLaws");

                    b.HasOne("ATSManagement.Models.TblRecomendationStatus", "Recostatus")
                        .WithMany("TblInspectionReports")
                        .HasForeignKey("RecostatusId")
                        .HasConstraintName("FK_tbl_InspectionReports_tbl_RecomendationStatus");

                    b.HasOne("ATSManagement.Models.TblYear", "Year")
                        .WithMany("TblInspectionReports")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_tbl_InspectionReports_tbl_Years");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Inist");

                    b.Navigation("Law");

                    b.Navigation("Recostatus");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionReportFile", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblInspectionReportFiles")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_InspectionReportFiles_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblAssignedYearlyPlan", "IdNavigation")
                        .WithMany("TblInspectionReportFiles")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_tbl_InspectionReportFiles_tbl_AssignedYearlyPlans");

                    b.HasOne("ATSManagement.Models.TblSpecificPlan", "SpecificPlan")
                        .WithMany("TblInspectionReportFiles")
                        .HasForeignKey("SpecificPlanId")
                        .HasConstraintName("FK_tbl_InspectionReportFiles_tbl_SpecificPlans");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("IdNavigation");

                    b.Navigation("SpecificPlan");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInstotutionMonitoringReport", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblInstotutionMonitoringReports")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_InstotutionMonitoringReports_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblMonth", "Month")
                        .WithMany("TblInstotutionMonitoringReports")
                        .HasForeignKey("MonthId")
                        .HasConstraintName("FK_tbl_InstotutionMonitoringReports_tbl_Months");

                    b.HasOne("ATSManagement.Models.TblYear", "Year")
                        .WithMany("TblInstotutionMonitoringReports")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_tbl_InstotutionMonitoringReports_tbl_Years");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Month");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalDocumentHistory", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblInternalDocumentHistories")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_InternalDocumentHistories_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblInternalRequest", "Request")
                        .WithMany("TblInternalDocumentHistories")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_tbl_InternalDocumentHistories_tbl_InternalRequests");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalRequest", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "AssignedByNavigation")
                        .WithMany("TblInternalRequestAssignedByNavigations")
                        .HasForeignKey("AssignedBy")
                        .HasConstraintName("FK_tbl_InternalRequests_tbl_InternalUsers1");

                    b.HasOne("ATSManagement.Models.TblInternalRequestStatus", "RequestStatus")
                        .WithMany("TblInternalRequests")
                        .HasForeignKey("RequestStatusId")
                        .HasConstraintName("FK_tbl_InternalRequests_tbl_InternalRequestStatus");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "RequestedByNavigation")
                        .WithMany("TblInternalRequestRequestedByNavigations")
                        .HasForeignKey("RequestedBy")
                        .HasConstraintName("FK_tbl_InternalRequests_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblInternalServiceType", "ServiceType")
                        .WithMany("TblInternalRequests")
                        .HasForeignKey("ServiceTypeId")
                        .HasConstraintName("FK_tbl_InternalRequests_tbl_InternalServiceTypes");

                    b.Navigation("AssignedByNavigation");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestedByNavigation");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalRequestAssignee", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalRequest", "Request")
                        .WithMany("TblInternalRequestAssignees")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_tbl_InternalRequestAssignees_tbl_InternalRequests");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblInternalRequestAssignees")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_InternalRequestAssignees_tbl_InternalUsers");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalRequestChat", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "SendByNavigation")
                        .WithMany("TblInternalRequestChatSendByNavigations")
                        .HasForeignKey("SendBy")
                        .HasConstraintName("FK_tbl_InternalRequestChats_tbl_InternalUsers1");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "SendToNavigation")
                        .WithMany("TblInternalRequestChatSendToNavigations")
                        .HasForeignKey("SendTo")
                        .HasConstraintName("FK_tbl_InternalRequestChats_tbl_InternalUsers2");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblInternalRequestChatUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_InternalRequestChats_tbl_InternalUsers");

                    b.Navigation("SendByNavigation");

                    b.Navigation("SendToNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalUser", b =>
                {
                    b.HasOne("ATSManagement.Models.TblDepartment", "Dep")
                        .WithMany("TblInternalUsers")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_tbl_InternalUsers_tbl_Department");

                    b.HasOne("ATSManagement.Models.TblTeam", "Team")
                        .WithMany("TblInternalUsers")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_tbl_InternalUsers_tbl_Teams");

                    b.Navigation("Dep");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalAdviceReport", b =>
                {
                    b.HasOne("ATSManagement.Models.TblMonth", "MonthNavigation")
                        .WithMany("TblLegalAdviceReports")
                        .HasForeignKey("Month")
                        .HasConstraintName("FK_tbl_LegalAdviceReports_tbl_Months");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "ReportedByNavigation")
                        .WithMany("TblLegalAdviceReports")
                        .HasForeignKey("ReportedBy")
                        .HasConstraintName("FK_tbl_LegalAdviceReports_tbl_LegalAdviceReports");

                    b.HasOne("ATSManagement.Models.TblYear", "YearNavigation")
                        .WithMany("TblLegalAdviceReports")
                        .HasForeignKey("Year")
                        .HasConstraintName("FK_tbl_LegalAdviceReports_tbl_Years");

                    b.Navigation("MonthNavigation");

                    b.Navigation("ReportedByNavigation");

                    b.Navigation("YearNavigation");
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalStudiesActivity", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblLegalStudiesActivities")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_LegalStudiesActivity_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblLegalStudiesDrafting", "Request")
                        .WithMany("TblLegalStudiesActivities")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_tbl_LegalStudiesActivity_tbl_LegalStudiesDrafting");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalStudiesChat", b =>
                {
                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblLegalStudiesChats")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_tbl_LegalStudiesChats_tbl_Requests");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "SendByNavigation")
                        .WithMany("TblLegalStudiesChatSendByNavigations")
                        .HasForeignKey("SendBy")
                        .HasConstraintName("FK_tbl_LegalStudiesChats_tbl_InternalUsers1");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "SendToNavigation")
                        .WithMany("TblLegalStudiesChatSendToNavigations")
                        .HasForeignKey("SendTo")
                        .HasConstraintName("FK_tbl_LegalStudiesChats_tbl_InternalUsers2");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblLegalStudiesChatUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_LegalStudiesChats_tbl_InternalUsers");

                    b.Navigation("Request");

                    b.Navigation("SendByNavigation");

                    b.Navigation("SendToNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalStudiesDrafting", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "AssignedByNavigation")
                        .WithMany("TblLegalStudiesDraftingAssignedByNavigations")
                        .HasForeignKey("AssignedBy")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_InternalUsers1");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "AssignedToNavigation")
                        .WithMany("TblLegalStudiesDraftingAssignedToNavigations")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblLegalStudiesDraftingCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_InternalUsers2");

                    b.HasOne("ATSManagement.Models.TblDepartment", "Dep")
                        .WithMany("TblLegalStudiesDraftings")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_Department");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "DepartmentUpprovalStatusNavigation")
                        .WithMany("TblLegalStudiesDraftingDepartmentUpprovalStatusNavigations")
                        .HasForeignKey("DepartmentUpprovalStatus")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_DecisionStatus3");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "DeputyUprovalStatusNavigation")
                        .WithMany("TblLegalStudiesDraftingDeputyUprovalStatusNavigations")
                        .HasForeignKey("DeputyUprovalStatus")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_DecisionStatus2");

                    b.HasOne("ATSManagement.Models.TblLegalDraftingDocType", "Doc")
                        .WithMany("TblLegalStudiesDraftings")
                        .HasForeignKey("DocId")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_LegalDraftingDocType");

                    b.HasOne("ATSManagement.Models.TblExternalRequestStatus", "ExternalRequestStatus")
                        .WithMany("TblLegalStudiesDraftings")
                        .HasForeignKey("ExternalRequestStatusId")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_ExternalRequestStatus");

                    b.HasOne("ATSManagement.Models.TblInistitution", "Inist")
                        .WithMany("TblLegalStudiesDraftings")
                        .HasForeignKey("InistId")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_Inistitutions");

                    b.HasOne("ATSManagement.Models.TblPriority", "Priority")
                        .WithMany("TblLegalStudiesDraftings")
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_Priority");

                    b.HasOne("ATSManagement.Models.TblLegalDraftingQuestionType", "QuestType")
                        .WithMany("TblLegalStudiesDraftings")
                        .HasForeignKey("QuestTypeId")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_LegalDraftingQuestionType");

                    b.HasOne("ATSManagement.Models.TblExternalUser", "RequestedByNavigation")
                        .WithMany("TblLegalStudiesDraftings")
                        .HasForeignKey("RequestedBy")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "TeamUpprovalStatusNavigation")
                        .WithMany("TblLegalStudiesDraftingTeamUpprovalStatusNavigations")
                        .HasForeignKey("TeamUpprovalStatus")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_DecisionStatus");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "UserUpprovalStatusNavigation")
                        .WithMany("TblLegalStudiesDraftingUserUpprovalStatusNavigations")
                        .HasForeignKey("UserUpprovalStatus")
                        .HasConstraintName("FK_tbl_LegalStudiesDrafting_tbl_DecisionStatus1");

                    b.Navigation("AssignedByNavigation");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Dep");

                    b.Navigation("DepartmentUpprovalStatusNavigation");

                    b.Navigation("DeputyUprovalStatusNavigation");

                    b.Navigation("Doc");

                    b.Navigation("ExternalRequestStatus");

                    b.Navigation("Inist");

                    b.Navigation("Priority");

                    b.Navigation("QuestType");

                    b.Navigation("RequestedByNavigation");

                    b.Navigation("TeamUpprovalStatusNavigation");

                    b.Navigation("UserUpprovalStatusNavigation");
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalStudiesReplay", b =>
                {
                    b.HasOne("ATSManagement.Models.TblExternalUser", "ExternalReplayedByNavigation")
                        .WithMany("TblLegalStudiesReplays")
                        .HasForeignKey("ExternalReplayedBy")
                        .HasConstraintName("FK_tbl_LegalStudiesReplays_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "ExternalReplayedBy1")
                        .WithMany("TblLegalStudiesReplays")
                        .HasForeignKey("ExternalReplayedBy")
                        .HasConstraintName("FK_tbl_LegalStudiesReplays_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblLegalStudiesDrafting", "Request")
                        .WithMany("TblLegalStudiesReplays")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_tbl_LegalStudiesReplays_tbl_LegalStudiesDrafting");

                    b.Navigation("ExternalReplayedBy1");

                    b.Navigation("ExternalReplayedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblNotification", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblNotificationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_Notifications_tbl_InternalUsers1");

                    b.HasOne("ATSManagement.Models.TblExternalUser", "ExterUser")
                        .WithMany("TblNotifications")
                        .HasForeignKey("ExterUserId")
                        .HasConstraintName("FK_tbl_Notifications_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblNotificationUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_Notifications_tbl_InternalUsers");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ExterUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblPlanCatagory", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInspectionPlan", "InspectionPlan")
                        .WithMany("TblPlanCatagories")
                        .HasForeignKey("InspectionPlanId")
                        .HasConstraintName("FK_tbl_PlanCatagory_tbl_InspectionPlans");

                    b.Navigation("InspectionPlan");
                });

            modelBuilder.Entity("ATSManagement.Models.TblPlanInistitution", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInistitution", "Inist")
                        .WithMany("TblPlanInistitutions")
                        .HasForeignKey("InistId")
                        .HasConstraintName("FK_tbl_Plan_Inistitution_tbl_Inistitutions");

                    b.HasOne("ATSManagement.Models.TblSpecificPlan", "SpecificPlan")
                        .WithMany("TblPlanInistitutions")
                        .HasForeignKey("SpecificPlanId")
                        .HasConstraintName("FK_tbl_Plan_Inistitution_tbl_SpecificPlans");

                    b.Navigation("Inist");

                    b.Navigation("SpecificPlan");
                });

            modelBuilder.Entity("ATSManagement.Models.TblRecomendation", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblRecomendations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_Recomendation_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblInistitution", "Inist")
                        .WithMany("TblRecomendations")
                        .HasForeignKey("InistId")
                        .HasConstraintName("FK_tbl_Recomendation_tbl_Inistitutions");

                    b.HasOne("ATSManagement.Models.TblInspectionLaw", "Law")
                        .WithMany("TblRecomendations")
                        .HasForeignKey("LawId")
                        .HasConstraintName("FK_tbl_Recomendation_tbl_InspectionLaws");

                    b.HasOne("ATSManagement.Models.TblRecomendationStatus", "Recostatus")
                        .WithMany("TblRecomendations")
                        .HasForeignKey("RecostatusId")
                        .HasConstraintName("FK_tbl_Recomendation_tbl_Recomendation2");

                    b.HasOne("ATSManagement.Models.TblYear", "Year")
                        .WithMany("TblRecomendations")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_tbl_Recomendation_tbl_Years");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Inist");

                    b.Navigation("Law");

                    b.Navigation("Recostatus");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("ATSManagement.Models.TblReplay", b =>
                {
                    b.HasOne("ATSManagement.Models.TblExternalUser", "ExternalReplayedByNavigation")
                        .WithMany("TblReplays")
                        .HasForeignKey("ExternalReplayedBy")
                        .HasConstraintName("FK_tbl_Replays_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "InternalReplayedByNavigation")
                        .WithMany("TblReplays")
                        .HasForeignKey("InternalReplayedBy")
                        .HasConstraintName("FK_tbl_Replays_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblReplays")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Replays_tbl_Requests");

                    b.Navigation("ExternalReplayedByNavigation");

                    b.Navigation("InternalReplayedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblReplyResponseWithExpert", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblReplyResponseWithExperts")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_ReplyResponseWithExpert_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblAssignedYearlyPlan", "IdNavigation")
                        .WithMany("TblReplyResponseWithExperts")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_tbl_ReplyResponseWithExpert_tbl_AssignedYearlyPlans");

                    b.HasOne("ATSManagement.Models.TblSpecificPlan", "SpecificPlan")
                        .WithMany("TblReplyResponseWithExperts")
                        .HasForeignKey("SpecificPlanId")
                        .HasConstraintName("FK_tbl_ReplyResponseWithExpert_tbl_SpecificPlans");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("IdNavigation");

                    b.Navigation("SpecificPlan");
                });

            modelBuilder.Entity("ATSManagement.Models.TblReplyResponseWithStateMinster", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblReplyResponseWithStateMinsters")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_ReplyResponseWithStateMinster_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblAssignedYearlyPlan", "IdNavigation")
                        .WithMany("TblReplyResponseWithStateMinsters")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_tbl_ReplyResponseWithStateMinster_tbl_AssignedYearlyPlans");

                    b.HasOne("ATSManagement.Models.TblSpecificPlan", "SpecificPlan")
                        .WithMany("TblReplyResponseWithStateMinsters")
                        .HasForeignKey("SpecificPlanId")
                        .HasConstraintName("FK_tbl_ReplyResponseWithStateMinster_tbl_SpecificPlans");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("IdNavigation");

                    b.Navigation("SpecificPlan");
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequest", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "AssignedByNavigation")
                        .WithMany("TblRequestAssignedByNavigations")
                        .HasForeignKey("AssignedBy")
                        .HasConstraintName("FK_tbl_Requests_tbl_InternalUsers1");

                    b.HasOne("ATSManagement.Models.TblCivilJusticeCaseType", "CaseTypeNavigation")
                        .WithMany("TblRequests")
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Requests_tbl_CivilJusticeCaseType");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblRequestCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_Requests_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "DepartmentUpprovalStatusNavigation")
                        .WithMany("TblRequestDepartmentUpprovalStatusNavigations")
                        .HasForeignKey("DepartmentUpprovalStatus")
                        .HasConstraintName("FK_tbl_Requests_tbl_DecisionStatus2");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "DeputyUprovalStatusNavigation")
                        .WithMany("TblRequestDeputyUprovalStatusNavigations")
                        .HasForeignKey("DeputyUprovalStatus")
                        .HasConstraintName("FK_tbl_Requests_tbl_DecisionStatus3");

                    b.HasOne("ATSManagement.Models.TblLegalDraftingDocType", "DocType")
                        .WithMany("TblRequests")
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Requests_tbl_LegalDraftingDocType");

                    b.HasOne("ATSManagement.Models.TblExternalRequestStatus", "ExternalRequestStatus")
                        .WithMany("TblRequests")
                        .HasForeignKey("ExternalRequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Requests_tbl_ExternalRequestStatus");

                    b.HasOne("ATSManagement.Models.TblInistitution", "Inist")
                        .WithMany("TblRequests")
                        .HasForeignKey("InistId")
                        .HasConstraintName("FK_tbl_Requests_tbl_Inistitutions");

                    b.HasOne("ATSManagement.Models.TblPriority", "Priority")
                        .WithMany("TblRequests")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Requests_tbl_Priority");

                    b.HasOne("ATSManagement.Models.TblLegalDraftingQuestionType", "QuestType")
                        .WithMany("TblRequests")
                        .HasForeignKey("QuestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Requests_tbl_LegalDraftingQuestionType");

                    b.HasOne("ATSManagement.Models.TblExternalUser", "RequestedByNavigation")
                        .WithMany("TblRequests")
                        .HasForeignKey("RequestedBy")
                        .HasConstraintName("FK_tbl_Requests_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblServiceType", "ServiceType")
                        .WithMany("TblRequests")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Requests_tbl_ServiceTypes");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "TeamUpprovalStatusNavigation")
                        .WithMany("TblRequestTeamUpprovalStatusNavigations")
                        .HasForeignKey("TeamUpprovalStatus")
                        .HasConstraintName("FK_tbl_Requests_tbl_DecisionStatus1");

                    b.HasOne("ATSManagement.Models.TblTopStatus", "TopStatus")
                        .WithMany("TblRequests")
                        .HasForeignKey("TopStatusId")
                        .HasConstraintName("FK_tbl_Requests_tbl_Requests");

                    b.HasOne("ATSManagement.Models.TblRequestAssignementType", "Type")
                        .WithMany("TblRequests")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Requests_tbl_RequestAssignementTypes");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "UserUpprovalStatusNavigation")
                        .WithMany("TblRequestUserUpprovalStatusNavigations")
                        .HasForeignKey("UserUpprovalStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Requests_tbl_DecisionStatus");

                    b.Navigation("AssignedByNavigation");

                    b.Navigation("CaseTypeNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DepartmentUpprovalStatusNavigation");

                    b.Navigation("DeputyUprovalStatusNavigation");

                    b.Navigation("DocType");

                    b.Navigation("ExternalRequestStatus");

                    b.Navigation("Inist");

                    b.Navigation("Priority");

                    b.Navigation("QuestType");

                    b.Navigation("RequestedByNavigation");

                    b.Navigation("ServiceType");

                    b.Navigation("TeamUpprovalStatusNavigation");

                    b.Navigation("TopStatus");

                    b.Navigation("Type");

                    b.Navigation("UserUpprovalStatusNavigation");
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequestAssignee", b =>
                {
                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblRequestAssignees")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_RequestAssignees_tbl_Requests");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "User")
                        .WithMany("TblRequestAssignees")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tbl_RequestAssignees_tbl_InternalUsers");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequestDepartmentRelation", b =>
                {
                    b.HasOne("ATSManagement.Models.TblAssignementType", "AssigneeType")
                        .WithMany("TblRequestDepartmentRelations")
                        .HasForeignKey("AssigneeTypeId")
                        .HasConstraintName("FK_TBL_RequestDepartmentRelations_tbl_AssignementTypes");

                    b.HasOne("ATSManagement.Models.TblDepartment", "Dep")
                        .WithMany("TblRequestDepartmentRelations")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_TBL_RequestDepartmentRelations_tbl_Department");

                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblRequestDepartmentRelations")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TBL_RequestDepartmentRelations_tbl_Requests");

                    b.HasOne("ATSManagement.Models.TblTeam", "Team")
                        .WithMany("TblRequestDepartmentRelations")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_TBL_RequestDepartmentRelations_tbl_Teams");

                    b.Navigation("AssigneeType");

                    b.Navigation("Dep");

                    b.Navigation("Request");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequestPriorityQuestionsRelation", b =>
                {
                    b.HasOne("ATSManagement.Models.TblPriorityQuestion", "PriorityQue")
                        .WithMany("TblRequestPriorityQuestionsRelations")
                        .HasForeignKey("PriorityQueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_RequestPriorityQuestionsRelations_tbl_PriorityQuestions");

                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblRequestPriorityQuestionsRelations")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_RequestPriorityQuestionsRelations_tbl_Requests");

                    b.Navigation("PriorityQue");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblRound", b =>
                {
                    b.HasOne("ATSManagement.Models.TblRequest", "RequestI")
                        .WithMany("TblRounds")
                        .HasForeignKey("RequestIid")
                        .HasConstraintName("FK_tbl_Rounds_tbl_Requests");

                    b.Navigation("RequestI");
                });

            modelBuilder.Entity("ATSManagement.Models.TblSentInspection", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInspectionPlan", "InspectionPlan")
                        .WithMany("TblSentInspections")
                        .HasForeignKey("InspectionPlanId")
                        .HasConstraintName("FK_tbl_SentInspections_tbl_InspectionPlans");

                    b.HasOne("ATSManagement.Models.TblInistitution", "Inst")
                        .WithMany("TblSentInspections")
                        .HasForeignKey("InstId")
                        .HasConstraintName("FK_tbl_SentInspections_tbl_Inistitutions");

                    b.HasOne("ATSManagement.Models.TblExternalUser", "RepliedByNavigation")
                        .WithMany("TblSentInspections")
                        .HasForeignKey("RepliedBy")
                        .HasConstraintName("FK_tbl_SentInspections_tbl_ExternalUser");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "SentByNavigation")
                        .WithMany("TblSentInspections")
                        .HasForeignKey("SentBy")
                        .HasConstraintName("FK_tbl_SentInspections_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblSpecificPlan", "SpecificPlan")
                        .WithMany("TblSentInspections")
                        .HasForeignKey("SpecificPlanId")
                        .HasConstraintName("FK_tbl_SentInspections_tbl_SpecificPlans");

                    b.Navigation("InspectionPlan");

                    b.Navigation("Inst");

                    b.Navigation("RepliedByNavigation");

                    b.Navigation("SentByNavigation");

                    b.Navigation("SpecificPlan");
                });

            modelBuilder.Entity("ATSManagement.Models.TblServiceType", b =>
                {
                    b.HasOne("ATSManagement.Models.TblDepartment", "Dep")
                        .WithMany("TblServiceTypes")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_tbl_ServiceTypes_tbl_Department");

                    b.Navigation("Dep");
                });

            modelBuilder.Entity("ATSManagement.Models.TblSpecificPlan", b =>
                {
                    b.HasOne("ATSManagement.Models.TblAssignementType", "AssigneeType")
                        .WithMany("TblSpecificPlans")
                        .HasForeignKey("AssigneeTypeId")
                        .HasConstraintName("FK_tbl_SpecificPlans_tbl_AssignementTypes");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblSpecificPlans")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_SpecificPlans_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblInistitution", "Inist")
                        .WithMany("TblSpecificPlans")
                        .HasForeignKey("InistId")
                        .HasConstraintName("FK_tbl_SpecificPlans_tbl_Inistitutions");

                    b.HasOne("ATSManagement.Models.TblInspectionPlan", "InspectionPlan")
                        .WithMany("TblSpecificPlans")
                        .HasForeignKey("InspectionPlanId")
                        .HasConstraintName("FK_tbl_SpecificPlans_tbl_InspectionPlans");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "IsUpprovedbyDepartmentNavigation")
                        .WithMany("TblSpecificPlanIsUpprovedbyDepartmentNavigations")
                        .HasForeignKey("IsUpprovedbyDepartment")
                        .HasConstraintName("FK_tbl_SpecificPlans_tbl_DecisionStatus");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "IsUpprovedbyTeamNavigation")
                        .WithMany("TblSpecificPlanIsUpprovedbyTeamNavigations")
                        .HasForeignKey("IsUpprovedbyTeam")
                        .HasConstraintName("FK_tbl_SpecificPlans_tbl_DecisionStatus1");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "IsUprovedByDeputyNavigation")
                        .WithMany("TblSpecificPlanIsUprovedByDeputyNavigations")
                        .HasForeignKey("IsUprovedByDeputy")
                        .HasConstraintName("FK_tbl_SpecificPlans_tbl_DecisionStatus2");

                    b.HasOne("ATSManagement.Models.TblDecisionStatus", "IsUserUprovedNavigation")
                        .WithMany("TblSpecificPlanIsUserUprovedNavigations")
                        .HasForeignKey("IsUserUproved")
                        .HasConstraintName("FK_tbl_SpecificPlans_tbl_DecisionStatus3");

                    b.HasOne("ATSManagement.Models.TblPlanCatagory", "PlanCat")
                        .WithMany("TblSpecificPlans")
                        .HasForeignKey("PlanCatId")
                        .HasConstraintName("FK_tbl_SpecificPlans_tbl_PlanCatagory");

                    b.HasOne("ATSManagement.Models.TblInspectionStatus", "Pro")
                        .WithMany("TblSpecificPlans")
                        .HasForeignKey("ProId")
                        .HasConstraintName("FK_tbl_SpecificPlans_tbl_InspectionStatus");

                    b.HasOne("ATSManagement.Models.TblTeam", "Team")
                        .WithMany("TblSpecificPlans")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_tbl_SpecificPlans_tbl_Teams");

                    b.Navigation("AssigneeType");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Inist");

                    b.Navigation("InspectionPlan");

                    b.Navigation("IsUpprovedbyDepartmentNavigation");

                    b.Navigation("IsUpprovedbyTeamNavigation");

                    b.Navigation("IsUprovedByDeputyNavigation");

                    b.Navigation("IsUserUprovedNavigation");

                    b.Navigation("PlanCat");

                    b.Navigation("Pro");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ATSManagement.Models.TblSubDebatePerformance", b =>
                {
                    b.HasOne("ATSManagement.Models.TblDebatePerformance", "Performance")
                        .WithMany("TblSubDebatePerformances")
                        .HasForeignKey("PerformanceId")
                        .HasConstraintName("FK_tbl_SubDebatePerformances_tbl_DebatePerformances");

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("ATSManagement.Models.TblSubmenu", b =>
                {
                    b.HasOne("ATSManagement.Models.TblDepartment", "Dep")
                        .WithMany("TblSubmenus")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_tbl_Submenu_tbl_Department");

                    b.HasOne("ATSManagement.Models.TblMainMenu", "Menu")
                        .WithMany("TblSubmenus")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_tbl_Submenu_tbl_MainMenu");

                    b.HasOne("ATSManagement.Models.TblRole", "Role")
                        .WithMany("TblSubmenus")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_tbl_Submenu_tbl_Roles");

                    b.Navigation("Dep");

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ATSManagement.Models.TblTeam", b =>
                {
                    b.HasOne("ATSManagement.Models.TblDepartment", "Dep")
                        .WithMany("TblTeams")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_tbl_Teams_tbl_Department");

                    b.HasOne("ATSManagement.Models.TblInternalUser", "TeamLeader")
                        .WithMany("TblTeams")
                        .HasForeignKey("TeamLeaderId")
                        .HasConstraintName("FK_tbl_Teams_tbl_InternalUsers");

                    b.Navigation("Dep");

                    b.Navigation("TeamLeader");
                });

            modelBuilder.Entity("ATSManagement.Models.TblWitnessEvidence", b =>
                {
                    b.HasOne("ATSManagement.Models.TblInternalUser", "CreatedByNavigation")
                        .WithMany("TblWitnessEvidences")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_tbl_Witness_Evidences_tbl_InternalUsers");

                    b.HasOne("ATSManagement.Models.TblRequest", "Request")
                        .WithMany("TblWitnessEvidences")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_Witness_Evidences_tbl_Requests");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAdjornment", b =>
                {
                    b.Navigation("TblAdjournmentChats");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAdreventType", b =>
                {
                    b.Navigation("TblAdractivitiesReports");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAppointment", b =>
                {
                    b.Navigation("TblAppointmentChats");

                    b.Navigation("TblAppointmentParticipants");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAssignedYearlyPlan", b =>
                {
                    b.Navigation("TblInspectionReportFiles");

                    b.Navigation("TblReplyResponseWithExperts");

                    b.Navigation("TblReplyResponseWithStateMinsters");
                });

            modelBuilder.Entity("ATSManagement.Models.TblAssignementType", b =>
                {
                    b.Navigation("TblInspectionPlans");

                    b.Navigation("TblRequestDepartmentRelations");

                    b.Navigation("TblSpecificPlans");
                });

            modelBuilder.Entity("ATSManagement.Models.TblCivilJustice", b =>
                {
                    b.Navigation("TblCivilJusticeRequestActivities");

                    b.Navigation("TblCivilJusticeRequestReplies");
                });

            modelBuilder.Entity("ATSManagement.Models.TblCivilJusticeCaseType", b =>
                {
                    b.Navigation("TblCivilJustices");

                    b.Navigation("TblRequests");
                });

            modelBuilder.Entity("ATSManagement.Models.TblDebatePerformance", b =>
                {
                    b.Navigation("TblSubDebatePerformances");
                });

            modelBuilder.Entity("ATSManagement.Models.TblDebatePerformanceEventType", b =>
                {
                    b.Navigation("TblDebateWorkPerformanceReports");
                });

            modelBuilder.Entity("ATSManagement.Models.TblDecisionStatus", b =>
                {
                    b.Navigation("TblCivilJusticeDepartmentUpprovalStatusNavigations");

                    b.Navigation("TblCivilJusticeDeputyUprovalStatusNavigations");

                    b.Navigation("TblCivilJusticeTeamUpprovalStatusNavigations");

                    b.Navigation("TblCivilJusticeUserUpprovalStatusNavigations");

                    b.Navigation("TblInspectionPlanIsUpprovedbyDepartmentNavigations");

                    b.Navigation("TblInspectionPlanIsUpprovedbyTeamNavigations");

                    b.Navigation("TblInspectionPlanIsUprovedByDeputyNavigations");

                    b.Navigation("TblInspectionPlanIsUserUprovedNavigations");

                    b.Navigation("TblLegalStudiesDraftingDepartmentUpprovalStatusNavigations");

                    b.Navigation("TblLegalStudiesDraftingDeputyUprovalStatusNavigations");

                    b.Navigation("TblLegalStudiesDraftingTeamUpprovalStatusNavigations");

                    b.Navigation("TblLegalStudiesDraftingUserUpprovalStatusNavigations");

                    b.Navigation("TblRequestDepartmentUpprovalStatusNavigations");

                    b.Navigation("TblRequestDeputyUprovalStatusNavigations");

                    b.Navigation("TblRequestTeamUpprovalStatusNavigations");

                    b.Navigation("TblRequestUserUpprovalStatusNavigations");

                    b.Navigation("TblSpecificPlanIsUpprovedbyDepartmentNavigations");

                    b.Navigation("TblSpecificPlanIsUpprovedbyTeamNavigations");

                    b.Navigation("TblSpecificPlanIsUprovedByDeputyNavigations");

                    b.Navigation("TblSpecificPlanIsUserUprovedNavigations");
                });

            modelBuilder.Entity("ATSManagement.Models.TblDepartment", b =>
                {
                    b.Navigation("TblCivilJustices");

                    b.Navigation("TblExternalRequests");

                    b.Navigation("TblExternalSubmenus");

                    b.Navigation("TblInternalUsers");

                    b.Navigation("TblLegalStudiesDraftings");

                    b.Navigation("TblRequestDepartmentRelations");

                    b.Navigation("TblServiceTypes");

                    b.Navigation("TblSubmenus");

                    b.Navigation("TblTeams");
                });

            modelBuilder.Entity("ATSManagement.Models.TblExternalMainMenu", b =>
                {
                    b.Navigation("TblExternalSubmenus");
                });

            modelBuilder.Entity("ATSManagement.Models.TblExternalRequestStatus", b =>
                {
                    b.Navigation("TblCivilJustices");

                    b.Navigation("TblExternalRequests");

                    b.Navigation("TblLegalStudiesDraftings");

                    b.Navigation("TblRequests");
                });

            modelBuilder.Entity("ATSManagement.Models.TblExternalUser", b =>
                {
                    b.Navigation("TblAppointmentChats");

                    b.Navigation("TblAppointments");

                    b.Navigation("TblCivilJusticeRequestReplies");

                    b.Navigation("TblCivilJustices");

                    b.Navigation("TblDocumentHistories");

                    b.Navigation("TblExternalRequests");

                    b.Navigation("TblFollowups");

                    b.Navigation("TblInspectionInstitutions");

                    b.Navigation("TblInspectionReplyes");

                    b.Navigation("TblLegalStudiesDraftings");

                    b.Navigation("TblLegalStudiesReplays");

                    b.Navigation("TblNotifications");

                    b.Navigation("TblReplays");

                    b.Navigation("TblRequests");

                    b.Navigation("TblSentInspections");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInistitution", b =>
                {
                    b.Navigation("TblAppointments");

                    b.Navigation("TblCivilJustices");

                    b.Navigation("TblExternalRequests");

                    b.Navigation("TblExternalUsers");

                    b.Navigation("TblFollowups");

                    b.Navigation("TblInspectionInstitutions");

                    b.Navigation("TblInspectionReports");

                    b.Navigation("TblLegalStudiesDraftings");

                    b.Navigation("TblPlanInistitutions");

                    b.Navigation("TblRecomendations");

                    b.Navigation("TblRequests");

                    b.Navigation("TblSentInspections");

                    b.Navigation("TblSpecificPlans");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionLaw", b =>
                {
                    b.Navigation("TblInspectionReports");

                    b.Navigation("TblRecomendations");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionPlan", b =>
                {
                    b.Navigation("TblAssignedYearlyPlans");

                    b.Navigation("TblPlanCatagories");

                    b.Navigation("TblSentInspections");

                    b.Navigation("TblSpecificPlans");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInspectionStatus", b =>
                {
                    b.Navigation("TblInspectionPlans");

                    b.Navigation("TblSpecificPlans");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalRequest", b =>
                {
                    b.Navigation("TblInternalDocumentHistories");

                    b.Navigation("TblInternalRequestAssignees");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalRequestStatus", b =>
                {
                    b.Navigation("TblInternalRequests");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalServiceType", b =>
                {
                    b.Navigation("TblInternalRequests");
                });

            modelBuilder.Entity("ATSManagement.Models.TblInternalUser", b =>
                {
                    b.Navigation("TblActivities");

                    b.Navigation("TblAdjornments");

                    b.Navigation("TblAdjournmentChatSendByNavigations");

                    b.Navigation("TblAdjournmentChatSendToNavigations");

                    b.Navigation("TblAdjournmentChatUsers");

                    b.Navigation("TblAdractivitiesReports");

                    b.Navigation("TblAppointmentChats");

                    b.Navigation("TblAppointmentParticipants");

                    b.Navigation("TblAssignedYearlyPlanAssignedByNavigations");

                    b.Navigation("TblAssignedYearlyPlanAssignedToNavigations");

                    b.Navigation("TblAssignees");

                    b.Navigation("TblCivilJusticeAssignedByNavigations");

                    b.Navigation("TblCivilJusticeAssignedToNavigations");

                    b.Navigation("TblCivilJusticeChatSendByNavigations");

                    b.Navigation("TblCivilJusticeChatSendToNavigations");

                    b.Navigation("TblCivilJusticeChatUsers");

                    b.Navigation("TblCivilJusticeCreatedByNavigations");

                    b.Navigation("TblCivilJusticeRequestActivities");

                    b.Navigation("TblCivilJusticeRequestReplies");

                    b.Navigation("TblDebateWorkPerformanceReports");

                    b.Navigation("TblDesicionRemarks");

                    b.Navigation("TblDocumentHistories");

                    b.Navigation("TblDraftContractExaminationReports");

                    b.Navigation("TblFollowups");

                    b.Navigation("TblInpectionActivites");

                    b.Navigation("TblInspectionChatSendByNavigations");

                    b.Navigation("TblInspectionChatSendToNavigations");

                    b.Navigation("TblInspectionChatUsers");

                    b.Navigation("TblInspectionInstitutions");

                    b.Navigation("TblInspectionPlans");

                    b.Navigation("TblInspectionReplyes");

                    b.Navigation("TblInspectionReportFiles");

                    b.Navigation("TblInspectionReports");

                    b.Navigation("TblInstotutionMonitoringReports");

                    b.Navigation("TblInternalDocumentHistories");

                    b.Navigation("TblInternalRequestAssignedByNavigations");

                    b.Navigation("TblInternalRequestAssignees");

                    b.Navigation("TblInternalRequestChatSendByNavigations");

                    b.Navigation("TblInternalRequestChatSendToNavigations");

                    b.Navigation("TblInternalRequestChatUsers");

                    b.Navigation("TblInternalRequestRequestedByNavigations");

                    b.Navigation("TblLegalAdviceReports");

                    b.Navigation("TblLegalStudiesActivities");

                    b.Navigation("TblLegalStudiesChatSendByNavigations");

                    b.Navigation("TblLegalStudiesChatSendToNavigations");

                    b.Navigation("TblLegalStudiesChatUsers");

                    b.Navigation("TblLegalStudiesDraftingAssignedByNavigations");

                    b.Navigation("TblLegalStudiesDraftingAssignedToNavigations");

                    b.Navigation("TblLegalStudiesDraftingCreatedByNavigations");

                    b.Navigation("TblLegalStudiesReplays");

                    b.Navigation("TblNotificationCreatedByNavigations");

                    b.Navigation("TblNotificationUsers");

                    b.Navigation("TblRecomendations");

                    b.Navigation("TblReplays");

                    b.Navigation("TblReplyResponseWithExperts");

                    b.Navigation("TblReplyResponseWithStateMinsters");

                    b.Navigation("TblRequestAssignedByNavigations");

                    b.Navigation("TblRequestAssignees");

                    b.Navigation("TblRequestCreatedByNavigations");

                    b.Navigation("TblSentInspections");

                    b.Navigation("TblSpecificPlans");

                    b.Navigation("TblTeams");

                    b.Navigation("TblWitnessEvidences");
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalDraftingDocType", b =>
                {
                    b.Navigation("TblLegalStudiesDraftings");

                    b.Navigation("TblRequests");
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalDraftingQuestionType", b =>
                {
                    b.Navigation("TblLegalStudiesDraftings");

                    b.Navigation("TblRequests");
                });

            modelBuilder.Entity("ATSManagement.Models.TblLegalStudiesDrafting", b =>
                {
                    b.Navigation("TblLegalStudiesActivities");

                    b.Navigation("TblLegalStudiesReplays");
                });

            modelBuilder.Entity("ATSManagement.Models.TblMainMenu", b =>
                {
                    b.Navigation("TblSubmenus");
                });

            modelBuilder.Entity("ATSManagement.Models.TblMonth", b =>
                {
                    b.Navigation("TblAdractivitiesReports");

                    b.Navigation("TblDebateWorkPerformanceReports");

                    b.Navigation("TblDraftContractExaminationReports");

                    b.Navigation("TblInstotutionMonitoringReports");

                    b.Navigation("TblLegalAdviceReports");
                });

            modelBuilder.Entity("ATSManagement.Models.TblPlanCatagory", b =>
                {
                    b.Navigation("TblSpecificPlans");
                });

            modelBuilder.Entity("ATSManagement.Models.TblPriority", b =>
                {
                    b.Navigation("TblCivilJustices");

                    b.Navigation("TblLegalStudiesDraftings");

                    b.Navigation("TblRequests");
                });

            modelBuilder.Entity("ATSManagement.Models.TblPriorityQuestion", b =>
                {
                    b.Navigation("TblRequestPriorityQuestionsRelations");
                });

            modelBuilder.Entity("ATSManagement.Models.TblRecomendationStatus", b =>
                {
                    b.Navigation("TblInspectionReports");

                    b.Navigation("TblRecomendations");
                });

            modelBuilder.Entity("ATSManagement.Models.TblReponseStatus", b =>
                {
                    b.Navigation("TblInspectionInstitutions");
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequest", b =>
                {
                    b.Navigation("TblActivities");

                    b.Navigation("TblAdjornments");

                    b.Navigation("TblCivilJusticeChats");

                    b.Navigation("TblDesicionRemarks");

                    b.Navigation("TblDocumentHistories");

                    b.Navigation("TblFollowups");

                    b.Navigation("TblLegalStudiesChats");

                    b.Navigation("TblReplays");

                    b.Navigation("TblRequestAssignees");

                    b.Navigation("TblRequestDepartmentRelations");

                    b.Navigation("TblRequestPriorityQuestionsRelations");

                    b.Navigation("TblRounds");

                    b.Navigation("TblWitnessEvidences");
                });

            modelBuilder.Entity("ATSManagement.Models.TblRequestAssignementType", b =>
                {
                    b.Navigation("TblRequests");
                });

            modelBuilder.Entity("ATSManagement.Models.TblRole", b =>
                {
                    b.Navigation("TblSubmenus");
                });

            modelBuilder.Entity("ATSManagement.Models.TblSentInspection", b =>
                {
                    b.Navigation("TblInspectionReplyes");
                });

            modelBuilder.Entity("ATSManagement.Models.TblServiceType", b =>
                {
                    b.Navigation("TblRequests");
                });

            modelBuilder.Entity("ATSManagement.Models.TblSpecificPlan", b =>
                {
                    b.Navigation("TblAssignedYearlyPlans");

                    b.Navigation("TblInpectionActivites");

                    b.Navigation("TblInspectionChats");

                    b.Navigation("TblInspectionReportFiles");

                    b.Navigation("TblPlanInistitutions");

                    b.Navigation("TblReplyResponseWithExperts");

                    b.Navigation("TblReplyResponseWithStateMinsters");

                    b.Navigation("TblSentInspections");
                });

            modelBuilder.Entity("ATSManagement.Models.TblStatus", b =>
                {
                    b.Navigation("TblAssignedYearlyPlans");
                });

            modelBuilder.Entity("ATSManagement.Models.TblSubDebatePerformance", b =>
                {
                    b.Navigation("TblDebatePerformanceEventTypes");

                    b.Navigation("TblDebateWorkPerformanceReports");

                    b.Navigation("TblEvents");
                });

            modelBuilder.Entity("ATSManagement.Models.TblTeam", b =>
                {
                    b.Navigation("TblInspectionPlans");

                    b.Navigation("TblInternalUsers");

                    b.Navigation("TblRequestDepartmentRelations");

                    b.Navigation("TblSpecificPlans");
                });

            modelBuilder.Entity("ATSManagement.Models.TblTopStatus", b =>
                {
                    b.Navigation("TblRequests");
                });

            modelBuilder.Entity("ATSManagement.Models.TblYear", b =>
                {
                    b.Navigation("TblAdractivitiesReports");

                    b.Navigation("TblDebateWorkPerformanceReports");

                    b.Navigation("TblDraftContractExaminationReports");

                    b.Navigation("TblInspectionPlans");

                    b.Navigation("TblInspectionReports");

                    b.Navigation("TblInstotutionMonitoringReports");

                    b.Navigation("TblLegalAdviceReports");

                    b.Navigation("TblRecomendations");
                });
#pragma warning restore 612, 618
        }
    }
}
